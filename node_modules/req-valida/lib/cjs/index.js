"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = void 0;
const http_errors_1 = __importDefault(require("http-errors"));
/**
 * Validate the request for expected data.
 * Passes the request to the next middleware if the validation passes or fails.
 * @param {object} validationObject - The object containing the validation rules.
 */
function validate({ location, data, isOptional }) {
    return function (request, _, next) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!location) {
                    console.error(`Location is missing - '${request.path}'`);
                    next((0, http_errors_1.default)(500, "Internal Server Error"));
                }
                if (!data) {
                    console.error(`Data is missing - '${request.path}'`);
                    next((0, http_errors_1.default)(500, "Internal Server Error"));
                }
                if (typeof data !== "object") {
                    console.error(`Data must be a object - '${request.path}'`);
                    next((0, http_errors_1.default)(500, "Internal Server Error"));
                }
                for (const key in data) {
                    if (request[location][key] === undefined &&
                        !isOptional &&
                        !data[key].isOptional) {
                        next((0, http_errors_1.default)(400, `'${key}' in request ${location} is missing`));
                    }
                    const commonErrorMessage = `'${request[location][key]}' must be '${data[key].rules[0]}', received as '${typeof request[location][key]}'.`;
                    const invalidRegexValidationMessage = `'${request[location][key]}' is not a valid ${key}.`;
                    // data[key].rules[1], will have the regex to validate the data if provided.
                    // type-check of variable, should be always checked before regex check.
                    // otherwise, regex will pass wrong data types checks as okay
                    if (request[location][key] &&
                        typeof request[location][key] !== data[key].rules[0]) {
                        next((0, http_errors_1.default)(400, commonErrorMessage));
                    }
                    // regex validation
                    if (request[location][key] &&
                        data[key].rules[1] &&
                        !data[key].rules[1].test(request[location][key].toString())) {
                        next((0, http_errors_1.default)(400, invalidRegexValidationMessage));
                    }
                }
                for (const key in request[location]) {
                    if (!data[key]) {
                        next((0, http_errors_1.default)(400, `Unexpected field '${key}' in request ${location}.'`));
                    }
                }
                next();
            }
            catch (error) {
                next(error);
            }
        });
    };
}
exports.validate = validate;
exports.default = { validate };
